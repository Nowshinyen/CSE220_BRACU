Name: Nowshin Sumaiya
ID: 21301276
Section: 09
Course: CSE220
Assignment: 03


class Node:
  def __init__(self, e, n):
    self.element = e
    self.next = n



class LinkedList:
  def __init__(self, a) :
    self.head = None
    if(type(a)== list) :
      self.head=Node(a[0], None)
      head_1=self.head
      
      for x in range(1,len(a)) :
        store=Node(a[x], None)
        head_1.next=store
        head_1=head_1.next   
    
    elif(type(a)== Node) :
      self.head=a
     
#-------------------------------------------  
  # Count the number of nodes in the list
  def countNode(self):
    store_h=self.head
    count_1=0
    
    while(store_h !=None) :
      store_h=store_h.next
      count_1=count_1+1
      
       
    return count_1
    
#------------------------------------------------------  
  # Print elements in the list
  def printList(self):
    store_h=self.head
    
    while (store_h.next!= None) :
      print(store_h.element,end=',')
      store_h=store_h.next
    
    print(store_h.element)
  
#-------------------------------------------
  # returns the reference of the Node at the given index. For invalid index return None.
  def nodeAt(self, idx) :
    store_h=self.head
    count_1=0
    
    while count_1<= idx :
      if count_1== idx :
        return store_h
      
      store_h=store_h.next
      count_1=count_1 +1  
 
#-------------------------------------------  
  # returns the element of the Node at the given index. For invalid idx return None.
  def get(self, idx):
    store_h=self.head
    count_1=0
    
    while store_h!=None:
      if(count_1==idx):
        return store_h.element  
      count_1= count_1 +1
      store_h=store_h.next
    
    return None   

    
#-------------------------------------------  
  # Returns the old element that was replaced. For invalid index return None.
  def set(self, idx, elem):
    if idx < 0 or idx>= LinkedList.countNode(self):
      return None
    store_h = self.head
    count = 0
    
    while store_h.next != None:
      if count == idx:
        a = store_h.element
        store_h.element = elem
        return a
      store_h = store_h.next
      count=count+ 1
    
    if count == idx:
      store_h.element = elem

    return None
  
#-------------------------------------------
  # returns the index of the Node containing the given element.
  def indexOf(self, elem):
    store_h = self.head
    count = 0
    
    while store_h.next != None:
      if store_h.element == elem:
        return count
      
      store_h = store_h.next
      count=count+1
    
    if store_h.element == elem: 
        return count 
    
    return -1
    
#-------------------------------------------  
  # returns true if the element exists in the List, return false otherwise.
  def contains(self, elem):
    store_h=self.head
    while store_h!=None :
      if(store_h.element== elem) :
        return (True)
      
      store_h=store_h.next
    return (False) 
    
#-------------------------------------------
  # Makes a duplicate copy of the given List. Returns the reference of the duplicate list.
  def copyList(self):
    store_h = self.head
    new_h = Node(store_h.element,None) 
    temp = new_h
    while store_h.next != None :
      store_h = store_h.next
      new = Node(store_h.element,None)
      
      temp.next = new
      temp = new
    return new_h
    
#-------------------------------------------
  # Makes a reversed copy of the given List. Returns the head reference of the reversed list.
  def reverseList(self):
    new_h=None
    store_h=self.head
    
    while(store_h!=None) :
      a=Node(store_h.element,None) 
      if(new_h==None):
        new_h= a
      
      else:
        a.next=new_h
        new_h=a
      store_h=store_h.next  
    
    return new_h   
    
#-------------------------------------------  
  # inserts Node containing the given element at the given index
  # Check validity of index.
  def insert(self, elem, idx):
    
    if idx<0 or idx> LinkedList.countNode(self):
      return None
    
    temp = Node(elem, None)
    if idx == 0 :
      store_h = self. head
      temp.next = store_h
      self.head =temp
    else:
      temp = Node(elem, None)
      node_1 = self.head
      count= 0
      
      while count<idx-1:
        node_1 = node_1.next
        count=count+1
      
      new_n = node_1.next
      temp.next = new_n
      node_1.next = temp

#-------------------------------------------
  # removes Node at the given index. returns element of the removed node.
  # Check validity of index. return None if index is invalid.
  def remove(self, idx):
    if (idx < 0 or idx >= self.countNode()): 
        return None
    if (idx == 0):
        store_h = self.head
        self.head = store_h.next

    else:
        temp = self.nodeAt(idx-1)
        store_h = temp.next
        
        temp.next = store_h.next

    return store_h.element
   

#-------------------------------------------  
  # Rotates the list to the left by 1 position.
  def rotateLeft(self):
    store_h=self.head
    head_1=self.head
    while head_1.next!=None :
      head_1=head_1.next
    
    head_1.next=store_h
    self.head=store_h.next
    
    store_h.next=None  

#-------------------------------------------  
  # Rotates the list to the right by 1 position.
  def rotateRight(self):
    store_h=self.head
    count=0
    
    while store_h.next.next!= None:
      store_h=store_h.next
    
    right=store_h.next
    right.next=self.head
    store_h.next=None
    self.head=right 
  
#-------------------------------------------------------
print("////// Test 01 //////")
a1 = [10, 20, 30, 40]
h1 = LinkedList(a1) # Creates a linked list using the values from the array
# head will refer to the Node that contains the element from a[0]

h1.printList() # This should print: 10,20,30,40
print(h1.countNode()) # This should print: 4

print("////// Test 02 //////")
# returns the reference of the Node at the given index. For invalid idx return None.
myNode = h1.nodeAt(1)
print(myNode.element) # This should print: 20. In case of invalid index This will generate an Error.
    
print("////// Test 03 //////")
# returns the element of the Node at the given index. For invalid idx return None.
val = h1.get(2)
print(val) # This should print: 30. In case of invalid index This will print None.
    
    
print("////// Test 04 //////")
    
# updates the element of the Node at the given index. 
# Returns the old element that was replaced. For invalid index return None.
# parameter: index, element
         
print(h1.set(1,85)) # This should print: 20
h1.printList() # This should print: 10,85,30,40.
print(h1.set(15,85)) # This should print: None
h1.printList() # This should print: 10,85,30,40. 
    
print("////// Test 05 //////")
# returns the index of the Node containing the given element.
# if the element does not exist in the List, return -1.
index = h1.indexOf(40)
print(index) # This should print: 3. In case of element that doesn't exists in the list this will print -1.
    
print("////// Test 06 //////")
# returns true if the element exists in the List, return false otherwise.
ask = h1.contains(40)
print(ask) # This should print: True.
    
    
print("////// Test 07 //////")
a2 = [10,20,30,40,50,60,70]
h2 = LinkedList(a2) # uses theconstructor where a is an built in list
h2.printList() # This should print: 10,20,30,40,50,60,70.  
# Makes a duplicate copy of the given List. Returns the head reference of the duplicate list.
copyH=h2.copyList() # Head node reference of the duplicate list
h3 = LinkedList(copyH) # uses the constructor where a is head of a linkedlist 
h3.printList() # This should print: 10,20,30,40,50,60,70.  
    
print("////// Test 08 //////")
a4 = [10,20,30,40,50]
h4 = LinkedList(a4) # uses theconstructor where a is an built in list
h4.printList() # This should print: 10,20,30,40,50.  
# Makes a reversed copy of the given List. Returns the head reference of the reversed list.
revH=h4.reverseList() # Head node reference of the reversed list
h5 = LinkedList(revH) # uses the constructor where a is head of a linkedlist 
h5.printList() # This should print: 50,40,30,20,10.  
    
print("////// Test 09 //////")
a6 = [10,20,30,40]
h6 = LinkedList(a6) # uses theconstructor where a is an built in list
h6.printList() # This should print: 10,20,30,40.  
    
# inserts Node containing the given element at the given index. Check validity of index.
h6.insert(85,0)
h6.printList() # This should print: 85,10,20,30,40.  
h6.insert(95,3)
h6.printList() # This should print: 85,10,20,95,30,40.  
h6.insert(75,6)
h6.printList() # This should print: 85,10,20,95,30,40,75. 
    
    
    
print("////// Test 10 //////")
a7 = [10,20,30,40,50,60,70]
h7 = LinkedList(a7) # uses theconstructor where a is an built in list
h7.printList() # This should print: 10,20,30,40,50,60,70.  
    
# removes Node at the given index. returns element of the removed node.
# Check validity of index. return None if index is invalid.
    
print("Removed element:",h7.remove(0)) # This should print: Removed element: 10
h7.printList() # This should print: 20,30,40,50,60,70.  
print("Removed element: ",h7.remove(3)) # This should print: Removed element: 50
h7.printList() # This should print: 20,30,40,60,70.  
print("Removed element: ",h7.remove(4)) # This should print: Removed element: 70
h7.printList() # This should print: 20,30,40,60. 
    
    
print("////// Test 11 //////")
a8 = [10,20,30,40]
h8 = LinkedList(a8) # uses theconstructor where a is an built in list
h8.printList() # This should print: 10,20,30,40.  
    
# Rotates the list to the left by 1 position.
h8.rotateLeft()
h8.printList() # This should print: 20,30,40,10.  
    
    
print("////// Test 12 //////")
a9 = [10,20,30,40]
h9 = LinkedList(a9) # uses theconstructor where a is an built in list
h9.printList() # This should print: 10,20,30,40.  
    
# Rotates the list to the right by 1 position.
h9.rotateRight()
h9.printList() # This should print: 40,10,20,30.

