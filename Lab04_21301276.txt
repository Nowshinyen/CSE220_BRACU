Name: Nowshin Sumaiya
ID: 21301276
Section: 09
Course: CSE220
Assignment: 04


class Node:
  def __init__(self, e, n, p):
    self.element = e
    self.next = n
    self.prev = p


class DoublyList:
  
  def __init__(self, a):
  #  Design the constructor based on data type of a. If 'a' is built in python list then
  #  Creates a linked list using the values from the given array.
    self.head = None
    self.tail = None
    
    if(type(a)==list) :
      self.head=Node (None,None,None)
      temp_1=self.head
      
      for j in range(len(a)):
        nd=Node(a[j],None,None)
        temp_1.next=nd
        nd.prev=temp_1
        temp_1=temp_1.next
      
      self.tail=temp_1
      temp_1.next=self.head
      self.head.prev=self.tail

    else:
      self.head=a
 
#-----------------------------------------    
  
  # Counts the number of Nodes in the list
  def countNode(self):
    temp_1= self.head.next 
    a=0
    
    while temp_1 !=self.head :
      a=a+1
      temp_1=temp_1.next 
    return a  
   
   
#-----------------------------------------      
  # prints the elements in the list
  def forwardprint(self):
    temp_1=self.head.next
    
    while temp_1.next != self.head :
      
      print(temp_1.element,end=',')
      temp_1= temp_1.next
    
    print(temp_1.element)
    
    
#-----------------------------------------    
  # prints the elements in the list backward
  def backwardprint(self):
    temp_1=self.head.prev
    
    while temp_1.prev!=self.head:
      
      print(temp_1.element,end=',')
      temp_1=temp_1.prev  
    print(temp_1.element)
    
    
#-----------------------------------------    
  # returns the reference of the at the given index. For invalid index return None.
  def nodeAt(self, idx):
    temp_1=self.head.next
    a=0
    
    if(idx>= 0 and idx<self.countNode()) :
      while a != idx:
        temp_1=temp_1.next
        a=a+1
      
      return temp_1
    
    else:
      error=Node("Index Error",None,None )
      return error
    
#-----------------------------------------      
  # returns the index of the containing the given element. if the element does not exist in the List, return -1.
  def indexOf(self, elem):
    node_1 = self.head.next
    store = 0
    
    while node_1.next.element != None :
      if node_1.element == elem :
        return store
      
      node_1 = node_1.next
      store= store + 1
    
    if node_1.element == elem :
      return store

    return -1

      
   
#-----------------------------------------    
  # inserts containing the given element at the given index Check validity of index. 
  def insert(self, elem, idx):
    temp_1=self.head.next
    node_1=Node(elem,None,None)
    store=0
    
    if(idx>=0 and idx<=self.countNode()):
      while(store!=idx):
        temp_1=temp_1.next
        store=store+1
      
      pre=temp_1.prev
      pre.next=node_1
      node_1.prev=pre
      temp_1.prev=node_1
      node_1.next=temp_1
    
    else:
      return None  
     
#-----------------------------------------       
  # removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
  def remove(self, idx):
    temp_1=self.head.next
    a=0
    
    if(idx>=0 and idx<self.countNode()):
      while a!=idx:
        temp_1=temp_1.next
        a=a+1
      
      n=temp_1.next
      pre=temp_1.prev
      n.prev=pre
      pre.next=n
      temp_1.next=None
      temp_1.prev=None
      return str(temp_1.element)
    
    else:
      return None  
     
      
#-----------------------------------------        



print("///  Test 01  ///")
a1 = [10, 20, 30, 40]
h1 = DoublyList(a1) # Creates a linked list using the values from the array

h1.forwardprint() # This should print: 10,20,30,40. 
h1.backwardprint() # This should print: 40,30,20,10. 
print(h1.countNode()) # This should print: 4

print("///  Test 02  ///")
# returns the reference of the at the given index. For invalid idx return None.
myNode = h1.nodeAt(2)
print(myNode.element) # This should print: 30. In case of invalid index This will print "index error"

print("///  Test 03  ///")
# returns the index of the containing the given element. if the element does not exist in the List, return -1.
index = h1.indexOf(40)
print(index) # This should print: 3. In case of element that 
#doesn't exists in the list this will print -1.

print("///  Test 04  ///")

a2 = [10, 20, 30, 40]
h2 = DoublyList(a2) # uses the  constructor
h2.forwardprint() # This should print: 10,20,30,40.  

# inserts containing the given element at the given index. Check validity of index.
h2.insert(85,0)
h2.forwardprint() # This should print: 85,10,20,30,40. 
h2.backwardprint() # This should print: 40,30,20,10,85.

print()
h2.insert(95,3)
h2.forwardprint() # This should print: 85,10,20,95,30,40.  
h2.backwardprint() # This should print: 40,30,95,20,10,80.  

print()
h2.insert(75,6)
h2.forwardprint() # This should print: 85,10,20,95,30,40,75. 
h2.backwardprint() # This should print: 75,40,30,95,20,10,85. 


print("///  Test 05  ///")
a3 = [10, 20, 30, 40, 50, 60, 70]
h3 = DoublyList(a3) # uses the constructor
h3.forwardprint() # This should print: 10,20,30,40,50,60,70.  

# removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
print("Removed element: "+ h3.remove(0)) # This should print: Removed element: 10
h3.forwardprint() # This should print: 20,30,40,50,60,70.  
h3.backwardprint() # This should print: 70,60,50,40,30,20.  
print("Removed element: "+ h3.remove(3)) # This should print: Removed element: 50
h3.forwardprint() # This should print: 20,30,40,60,70.  
h3.backwardprint() # This should print: 70,60,40,30,20.  
print("Removed element: "+ h3.remove(4)) # This should print: Removed element: 70
h3.forwardprint() # This should print: 20,30,40,60. 
h3.backwardprint() # This should print: 60,40,30,20.